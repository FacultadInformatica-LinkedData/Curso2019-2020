Ejercicios Obligatorios Assigment 3:

1.Get all the properties that can be applied to instances of
prefix schema: <http://dbpedia.org/ontology/>
select distinct ?p
where {
?x a schema:Politician .
?x ?p ?z.
} 

2.Get all the properties, except rdf:type, that can be applied to instances of the Politician class
prefix schema: <http://dbpedia.org/ontology/>
select distinct ?p 
where {
?x a schema:Politician .
?x ?p ?z .
filter (?p != rdf:type ).
} limit 100

3.Which different values exist for the properties, except rdf:type, of the instances of the Politician class?
prefix schema: <http://dbpedia.org/ontology/>
select distinct ?p ?value
where {
?x a schema:Politician .
?x ?p ?value .
filter (?p != rdf:type ).
} limit 100

4.For each of the properties, except rdf:type, that can be applied to instances of the Politician class, which different values do they take in those instances?
prefix schema: <http://dbpedia.org/ontology/>
select distinct ?x
where {
?x a schema:Politician .
?x ?p ?value .
filter (?p != rdf:type ).
} limit 100

5. For each of the properties, except rdf:type, that can be applied to instances of the Politician class, how many distinct values do they take in those instances?
prefix schema: <http://dbpedia.org/ontology/>
select distinct ?p (count(distinct ?x) as ?count)
where {
?x a schema:Politician .
?x ?p ?value .
filter (?p != rdf:type ).
} limit 100


prefix schema: <http://dbpedia.org/ontology/>
select distinct ?p (count (?x) as ?count)
where {
?x a schema:Politician .
?x ?p ?value .
filter (?p != rdf:type ).
} limit 100


#Ejercicios de clase (Transparencias) : 
#ENDPOINT: http://sandbox.linkeddata.es/sparql y el grafo es : http://sandbox.linkeddata.es/Grado_20122013

#1: Get all the classes
#SOLUCION
select distinct ?clase 
where {
?x a ?clase
}LIMIT 100
#SOLUCION que muestra todas las clases independientemante de si existen instancias de las mismas o no:
	


#2: Get all the subclasses of the class Establishment
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?clase 
where {
?clase rdfs:subClassOf ex:Establishment
}LIMIT 100
#SOLUCION que a demás devuelve todos los hijos del grafo incluyendo aquellos de niveles inferiores ('+')
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?clase 
where {
?clase rdfs:subClassOf+ ex:Establishment
}LIMIT 100


#3: Get all instances of the class City
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?x
where {
?x a ex:City
}LIMIT 100
#SOLUCION Si no esta activada la inferencia, para poder ver los elementos heredados (por inferencia) y para
#esta consulta en concreto podríamos hacer:
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?city
where {
?city a/rdfs:subClassOf* ex:City 
}LIMIT 100


#4: Get the number of inhabitants of Santiago de Compostela
#First we get all the properties of the tripet: 
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?p
where {
ex:Santiago_de_Compostela ?p ?z
}LIMIT 100
#if we want to show all information insted only the properties we go like this:
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?p ?z
where {
ex:Santiago_de_Compostela ?p ?z
}LIMIT 100

#Then we answer the question
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?z
where {
ex:Santiago_de_Compostela
ex:hasInhabitantNumber ?z
}LIMIT 100


#5: Get the number of inhabitants of Santiago de Compostela and Arzua
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y ?z
where {
?y ex:hasInhabitantNumber ?z.
FILTER(?y IN (ex:Arzua , ex:Santiago_de_Compostela))
}LIMIT 100


#6: Get all places, together with the number of inhabitants, ordered by the place name (ascending)
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y ?nombre ?z
where {
?y ex:hasInhabitantNumber ?z.
?y rdfs:label ?nombre
}order by ?nombre


#7: Get all instances of  Locality together with their number of inhabitants (if this information exists)
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y ?z
where {
?y a ex:Locality.
optional{?y ex:hasInhabitantNumber ?z}
}limit 100
#SOLUCION si además queremos usar inferencia para ver si sus hijos tienen alguna instancia de Locality
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y ?z
where {
?y a/rdfs:subClassOf* ex:Locality.
optional{?y ex:hasInhabitantNumber?z}
}limit 100


#8: Get all places with more than 200.000 inhabitants
#SOLUCION Es necesario hacer un cast en la variable ?z pues los datos no están subidos como integer 
Están subidos como String
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y xsd:integer(?z) as ?hab
where {
?y ex:hasInhabitantNumber ?z.
filter(xsd:integer(?z)>200000)
}limit 100


#9: Get postal address data for Pazo_Breogan (street, number, locality, province)
#if we want to show the information of a property firt we check if the triplet has it:
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y 
where {
ex:Pazo_Breogan ?y ?p
}LIMIT 100
#Then we answer the question showing the information of the property: hasAddress
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y ?p
where {
ex:GP_Santiago_Instance_85 ?y ?p
}LIMIT 100


#10: Get all subclasses of class Location
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?location
where {
?location rdfs:subClassOf ex:Location
}LIMIT 10
#SOLUCION que a demás devuelve todos los hijos del grafo incluyendo aquellos de niveles inferiores ('+')
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?location
where {
?location rdfs:subClassOf+ ex:Location
}LIMIT 100


#11: Get all instances of class Locality
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?x
where {
?x a ex:Locality
}LIMIT 100 
#SOLUCION Si no esta activada la inferencia, para poder ver los elementos heredados (por inferencia) y para
#esta consulta en concreto podríamos hacer:
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?x
where {
?x a/rdfs:subClassOf* ex:Locality 
}LIMIT 100


#12: Describe the resource with rdfs:label "Madrid”
#SOLUCION
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
describe ?x
where{ 
#ex:City.
?x rdfs:label "Madrid"
}
#Una alternativa sin usar el rdfs:label es:
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
describe ?y ?p
where {
ex:Madrid ?y ?p
}LIMIT 100 


#13: Construct a graph that relates directly all touristic places with their provinces, using a new property 
#called ”isIn”
#Fist we get all the cities that have the property inProvince:
#SOLUCION 
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
select distinct ?y ?z
where {
?y ex:inProvince ?z.
}LIMIT 100
#SOLUCION una vez vemmos las propiedades hay que unirlas creando la nueva propiedad
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
construct {
?p ex:isIn ?q
}
where {
?p ex:isPlacedIn ?y.
?y ex:inProvince ?q
}


#14: Check whether there is any instance of Town
prefix ex:<http://GP-onto.fi.upm.es/exercise2#>
ask {
?x a ex:Town
}

